1. Read OBJ
2. Generate surface panels
3. Send panels to Fortran CFD solver
4. Get pressure field + lift/drag
5. Estimate shape gradient (∂Drag/∂VertexPosition)
6. Apply constrained optimization step:
   - smooth updates (Laplacian smoothing)
   - conserve volume
7. Save updated .obj
8. Repeat for N iterations


aero_shape_optimizer/
├── main.py              # Master script
├── cfd_solver/          
│   ├── solver.f90       # Fortran CFD solver
│   ├── compile.sh       # Compilation script
├── meshes/
│   ├── input.obj        # Starting geometry
│   ├── optimized.obj    # Optimized output
├── data/
│   ├── vertices.dat     # Mesh vertices
│   ├── faces.dat        # Mesh faces
│   ├── forces.dat       # Lift, drag results
├── utils/
│   ├── obj_io.py        # Read/write .obj
│   ├── optimizer.py     # Optimization with constraints
│   ├── smoothing.py     # Surface smoothing functions
│   ├── volume.py        # Volume computation & preservation
├── README.md
